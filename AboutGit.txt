Git简介
	Git是目前世界上最先进的分布式版本控制系统（没有之一）
	很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。
Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？
事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！
你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。
不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。
安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。
Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的
Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。
Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。
历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。

安装Git
	Linux：通过sudo apt-get install git
	Mac OSX:AppStore上安装Xcode，
	运行Xcode->Preference->弹窗中找到Downloades，选择Command Line Tools
	Windows：通过https://git-for-windows.github.io/下载
	安装完成后，配置作者及email：
	$ git config --global user.name "ShadowCdu"
	$ git config --global user.email "emial@example.com"
	
创建版本库
	1.创建一个空目录：
	$ mkdir firstGitRepositoty
	$ cd firstGitRepositoty
	$ pwd
	pwd命令用于显示当前目录，Windows下确保目录不包含中文
	
	2.使用git init将目录变成Git可以管理的仓库
	$ git init
	执行后目录多了一个.git的目录，该目录是Git用于跟踪管理版本库的。
	若没有看到该目录，是因为该目录是隐藏的
	可以使用ls -ah命令查看
	
	3.把文件添加到版本库
	所有的版本控制系统，只能跟踪文本文件的改动，如txt网页等
	图片、视频等这些二进制文件，也能由版本控制系统管理，但无法跟踪文件的变化。
	只能把二进制文件每次改动串联起来，也就是只知道图片由100kb改成了120kb
	不幸的是，Microsoft的Word格式是二进制格式，所以版本控制系统无法跟踪Word的改动
	要真正使用版本控制系统，就要以纯文本的方式编写文件
	因为文本是有编码的，如中文常用的GBK，日文的Shift_JIS。
	强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，无冲突，又被所有平台支持。
		现在编写一个README.txt文件
		1.使用命令将文件添加到仓库：
		$ git add README.txt
		执行命令，若没有任何显示，就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功
		
		2.用命令git commit将文件提交到仓库：
		$ git commit -m "wrote a readme file"
		简单解释下 -m 后面输入的是本次提交的说明
		命令执行成功后会提示你，一个文件被改动（新增的README.txt文件）,插入了两行内容
		为什么Git添加文件需要add，commit两步呢，因为commit可以一次提交很多文件
		
时光机穿梭
		添加readme文件后，修改该文件
		使用git status命令可以让我们时刻掌握仓库当前的状态，
		上面的命令告诉我们readme.txt被修改了，
		如果我们想看怎么修改的
		可以使用git diff命令
	版本回退
		先使用git log查看各种版本的历史记录
		git log 命令显示从最近到最远的提交日志
		如果嫌输出信息太多，可以加上--pretty=oneline参数
		$ git log --pretty=oneline
		可以看到一大串类似abe23dbf..的是commit id（版本号）
		和SVN不一样，Git的commit id 不是1,2,3的递增的数字，而是一个SHA1计算出来的非常大的数字，用16进制表示
		为啥要用这么一大串呢，因为Git是分布式的版本控制系统
		每提交一个新版本，实际上Git就会把它们自动串成一条时间线
		如何回退呢，
		在Git中，HEAD表示当前版本，上一个版本就是HEAD^，上上个就是HEAD^^
		再往上100个版本可以用HEAD~100
		现在回退到上个版本：
		$ git reset --hard HEAD^
		或者使用（后面跟上commit id前几位就行）
		$ git reset --hard 3628123
		Git的版本速度非常快，因为Git的内部有个指向当前版本的HEAD指针，
		当你回退时，只是把HEAD指向了你所指向的版本
		Git提供了一种命令git reflog用来记录你每一次命令
	
	工作区和暂存区
		工作区（Working Directory）
			即电脑里看到的目录，如（Git Repository）
		版本库（Repository）
			工作区里有个隐藏目录（.git）,这个不算工作区，而是Git的版本库
			Git的版本库里存了很多东西，其中最重要的就是称为stage(或者叫index)的暂存区
			还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD
			把文件往Git版本库里添加的时候，分两步执行：
			第一步是git add将文件添加进去，实际就是把文件修改添加到暂存区
			第二步是git commit提交修改，实际就是把暂存区的所有内容提交到当前分支
<<<<<<< HEAD
			
		
		
=======
		管理修改
			使用cat **.txt,进行修改文件
			每次修改如果不使用git add，将不会添加到git commit中
		撤销修改
			$ git checkout -- readme.txt
			使用cat查看内容
			git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
			如果已经add到暂存区了，但没有提交，可使用命令：
			$ git reset HEAD file
			可以把暂存区的修改撤销掉(unstage),重新放回工作区
			git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
			场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
			场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
			场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
		删除文件
			一般使用rm命令即可删除文件
			也可使用$ git rm test.txt删除
			删错了可以使用$ git checkout -- test.txt进行恢复
	远程仓库
			搭建一台运行Git的服务器，可以使用GitHub网站，该网站提供Git仓库托管服务，只要注册一个账号，即可免费获得Git远程仓库
			第一步：创建SSH Key,在用户主目录下，看有无.ssh目录，若有，再看看目录下有无id_rsa和id_rsa.pub两个文件，若有，可直接跳到下一步
			若无，打开Shell（Git Bash）,创建SSH Key:
			$ ssh-keygen -t rsa -C "***@**.com"
			把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可
			如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，
			这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
			第二步：登陆GitHub，打开"Account settings"，"SSH Keys"页面：
			点击"Add SSH Key"，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
			为什么GitHub需要SSH Key呢？
			因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送
			当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
			在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去
			如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。
			另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。
		添加远程库
			首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：
			在Repository name填入ASPlugin，其他默认设置，点击Create repository按钮，即成功创建了Git仓库
			现在GitHub上的仓库还是空的，我们可以把一个已有的本地仓库与之关联再把本地仓库的内功推动到GitHub仓库：
			在本地的仓库下运行命令：
			$ git remote add origin git@github.com:csddatamining
			然后把本地库的所有内容推送到远程库上：
			$ git push -u origin master
			把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
			由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
			还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
			推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样
			
			
			
			
			
>>>>>>> c0d893451e552a7c783f17c33aebfb8b79fc26b8
