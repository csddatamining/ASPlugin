批处理命令（bat）之echo命令
显示信息：echo
1.输出提示信息
格式：echo 你要输出的信息

echo hello,world
echo i will come back
pause
执行显示：
C:\bat>echo hello,world
hello,world
C:\bat>echo i will come back
i will come back
C:\bat>pause
请按任意键继续. . .


2.关闭该命令的回显
格式：@ 放在命令前面

@echo hello,world
@echo i will come back
pause
执行显示：
hello,world
i will come back
C:\bat>pause
请按任意键继续. . .

3.打开回显或关闭回显功能
格式:echo [{ on|off }]
解释一下，如果在批处命令前加上echo off，那么将会关闭批处中的命令回显。如果不想显示echo off
命令本身，你可以把@加在echo off前面。

@echo off
echo hello,world
echo i will come back
pause
执行显示：
hello,world
i will come back
请按任意键继续. . .

在批处理前面加上@echo off ，它将使所有命令不再显示命令本身，当然也包括了echo off 命令本身也不会回显了。

4.输出空行，即相当于输入一个回车
格式:echo.
注意命令中的“.”要紧跟在ECHO后面,中间不能有空格，否则“.”将被当作提示信息输出到屏幕。另外“.”可以
用，：；”／]＋\ 这些任一符号替代。

@echo off
echo 我在写批处理教程哦！
echo.
echo 你看到上面有空一行么？
pause
执行显示：
我在写批处理教程哦！

你看到上面有空一行么？
请按任意键继续. . .

命令ECHO．输出的回车，经DOS管道转向可以作为其它命令的输入，比如echo.|time即相当于在TIME命令执行后给出一个回车。所以执行时系统会在显示当前时间后,自动返回到DOS提示符状态。

5.答复命令中的提问
格式：ECHO 回复|命令表达式
作用：通过管道命令 | 把“回复”作为输入传导给后面的“命令表达式”，并作为“命令表达式”的输入。（注意，管道命令|的输入方法，shift键 \）

@echo off
rd /s c:\abc
pause
执行显示：
c:\abc, 是否确认(Y/N)?

解释一下，这里abc是一个不为空的文件夹，用rd 命令删除时它将会询问你Y或N，这时你就要手动的输入Y/N了。
OK，我们把批处改一下,这时系统将会自动帮助我们把Y输入确认了
@echo off
echo Y|rd /s c:\abc
pause

6.建立新文件或增加文件内容
格式：echo 文件内容>文件名

@echo off
echo 123>myfile.txt
pause
这样我们就在当前目录下建立了一个myfile.txt文件，文件的内容为123。如果你想要建立一个空的新文件，那你
可以试一下这个

@echo off
echo. >myfile.txt 
pause


echo -----bat的应用----
echo off
SET PROJECT_HOME=%cd%
ECHO PROJECT_HOME:"%PROJECT_HOME%"

IF [%ANTX_PROPERTY%]==[] SET ANTX_PROPERTY="C:%HOMEPATH%\antx.properties"
ECHO ANTX_PROPERTY:%ANTX_PROPERTY%

IF [%JETTY_HOME%]==[] SET JETTY_HOME=D:\alibaba\jetty-7.2.0
ECHO JETTY_HOME: "%JETTY_HOME%"

set MAVEN_OPTS=-Xms256m -Xmx512m -XX:ReservedCodeCacheSize=64m -XX:MaxPermSize=128m
cd %PROJECT_HOME%

:mvn_command
ECHO.
ECHO.注意：现在的编译和部署步骤分开，需要先选择编译打包，成功后再选择启动jetty
ECHO.
ECHO 1-生成eclipse工程文件
ECHO.
ECHO 2-增量编译打包
ECHO.
ECHO 3-全量编译打包业务代码（在项目的依赖jar包升级或增量编译有错误时使用）
ECHO.
ECHO 4-全量编译所有代码（包括业务代码，测试代码，黑白名单，用于验证项目的正确性）
ECHO.
ECHO 5-启动jetty
ECHO.
ECHO 6-热部署jetty
ECHO.
ECHO 7-安装和启动httpd
ECHO.
ECHO 8-执行所有测试 
ECHO.
ECHO 9-执行子项目测试
ECHO.
ECHO 10-单独编译deploy工程（适用于修改了配置项后的编译）
ECHO.
ECHO 0-退出菜单

set /p isopt=【选择命令】
if /i "%isopt%"=="1" goto mvn_eclipse
if /i "%isopt%"=="2" goto mvn_incremental_package
if /i "%isopt%"=="3" goto mvn_full_package
if /i "%isopt%"=="4" goto mvn_compile_all
if /i "%isopt%"=="5" goto run_jetty 
if /i "%isopt%"=="6" goto run_hotswap_jetty 
if /i "%isopt%"=="7" goto httpd_service
if /i "%isopt%"=="8" goto mvn_test_all
if /i "%isopt%"=="9" goto mvn_test_project
if /i "%isopt%"=="10" goto mvn_complie_deploy
if /i "%isopt%"=="0" goto mvn_end

echo "无效选项，请选择(0-9)"
goto mvn_command

:mvn_eclipse
    ECHO.
    ECHO.
    ECHO.
    ECHO 1-第一次生成eclipse工程文件
    ECHO.
    ECHO 2-重新生成eclipse工程文件
    ECHO.
    ECHO 0-返回
    set /p eopt=【选择命令】
    if /i "%eopt%"=="1" goto mvn_eclipse_first
    if /i "%eopt%"=="2" goto mvn_eclipse_again
    goto mvn_command

:mvn_eclipse_first
    cd %PROJECT_HOME%
    echo 生成eclipse工程文件
    start /HIGH mvn install eclipse:eclipse -Dmaven.test.skip -Pskip.attach.sources -Pskip.test.resources -Denforcer.skip -Denv=release
    goto mvn_command

:mvn_eclipse_again
    cd %PROJECT_HOME%
    echo 生成eclipse工程文件
    start /HIGH mvn eclipse:clean eclipse:eclipse
    goto mvn_command

    
:mvn_incremental_package
    cd %PROJECT_HOME%    
    start /HIGH mvn install -Dmaven.test.skip -Pskip.test.resources -DuserProp=%ANTX_PROPERTY% -Dautoconfig.userProperties=%ANTX_PROPERTY%
    goto mvn_command
    

:mvn_full_package
    cd %PROJECT_HOME%
    start /HIGH mvn clean install -Dmaven.test.skip  -Pskip.test.resources -DuserProp=%ANTX_PROPERTY% -Dautoconfig.userProperties=%ANTX_PROPERTY%
    goto mvn_command
    
:mvn_compile_all
    cd %PROJECT_HOME%
    start /HIGH mvn clean install -DskipTests=true -Pskip.attach.sources -DuserProp=%ANTX_PROPERTY% -Dautoconfig.userProperties=%ANTX_PROPERTY%
    goto mvn_command
    
:run_jetty
    start /HIGH call %PROJECT_HOME%\deploy\target\web-deploy\bin\jettyctl.bat
    goto mvn_command
    
:run_hotswap_jetty
    cd %PROJECT_HOME%\bundle\war
    call mvn compile -DenableHotswap=true -DuserProp=%ANTX_PROPERTY% -Dautoconfig.userProperties=%ANTX_PROPERTY%
    start /HIGH call %PROJECT_HOME%\deploy\target\web-deploy\bin\jettyctl.bat true %PROJECT_HOME%
    goto mvn_command
    
:httpd_service
    cd %PROJECT_HOME%\deploy\target\web-deploy\bin
    start /SEPARATE call httpdService.bat
    goto mvn_command
    
:mvn_test_all
    cd %PROJECT_HOME%
    echo 开始执行测试
    start /HIGH mvn clean test
    goto mvn_command
    
:mvn_test_project
    set /p subprj=【输入项目路径】
    echo %PROJECT_HOME%\%subprj%
    cd %PROJECT_HOME%\%subprj%
    start /HIGH mvn test
    goto mvn_command    
    
:mvn_complie_deploy
    cd %PROJECT_HOME%\deploy    
    start /HIGH mvn install -Dmaven.test.skip -Pskip.test.resources -DuserProp=%ANTX_PROPERTY% -Dautoconfig.userProperties=%ANTX_PROPERTY%
    goto mvn_command
    
:mvn_end
cd %PROJECT_HOME%



上述脚本程序，保存为.bat文件，双击启动。效果图如下所示：启动一个项目，必须执行步骤：3.编译.java文件为.class文件。5.将*.class文件加载到jetty容器中启动。7.启动项目为apache 服务。项目即启动成功了。